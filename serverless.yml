# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: serverless-web-scaper
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs12.x

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
      Resource:
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-${opt:stage,'dev'}-tags"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-${opt:stage,'dev'}-tags/*"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-${opt:stage,'dev'}-authors"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-${opt:stage,'dev'}-authors/*"
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  refreshQuoteStats:
    handler: handler.refreshQuoteStats
    timeout: 120
    events:
      - http:
          path: refreshQuoteStats
          method: post
  getAuthors:
    handler: handler.getAuthors
    timeout: 10
    events:
      - http:
          path: authors
          method: get
  getTags:
    handler: handler.getTags
    timeout: 10
    events:
      - http:
          path: tags
          method: get

resources:
  Resources:
    authors:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${opt:stage,'dev'}-authors
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: name
            KeyType: HASH
    tags:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${opt:stage,'dev'}-tags
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: name
            KeyType: HASH
            
plugins:
  - serverless-finch
  - serverless-appsync-plugin 
  
custom:
  client:
    bucketName: ${self:service}-${opt:stage,'dev'}-react #change this to something unique
    distributionFolder: frontend/build/
  appSync:
    name: ${self:service}-${opt:stage,'dev'}
    authenticationType: API_KEY
    mappingTemplates:
      - dataSource: Tags
        type: Query
        field: getTags
        request: "getTags-request-mapping-template.txt"
        response: "getTags-response-mapping-template.txt"
    schema: schema.graphql
    dataSources:
      - type: AMAZON_DYNAMODB
        name: Tags
        description: Tags Table
        config:
          tableName: ${self:service}-${opt:stage,'dev'}-tags
          #serviceRoleArn: { Fn::GetAtt: [AppSyncDynamoDBServiceRole, Arn] }
          iamRoleStatements:
            - Effect: "Allow"
              Action:
                - "dynamodb:*"
              Resource:
                - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-${opt:stage,'dev'}-tags"
                - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-${opt:stage,'dev'}-tags/*"